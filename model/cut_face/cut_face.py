# -*- coding: utf-8 -*-
"""cut_face.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-KPCKpkhire9zlDhcdNMMRCPYvnoiCm7
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab.patches import cv2_imshow

from imutils import face_utils
import numpy as np
import argparse
import imutils
import dlib
import cv2
import os

def print_image_info(image):
    print('이미지 사이즈 : {}'.format(image.shape))
    print('이미지 dtype : {}'.format(image.dtype))
    print('이미지 Height : {}'.format(image.shape[0]))
    print('이미지 Width : {}'.format(image.shape[1]))
    print('이미지 전체 픽셀 개수 : {}'.format(image.size))

root_dir = './dataset_input/fall/bin'

img_path_list = []
possible_img_extension = ['.jpg', '.jpeg', '.JPG', '.bmp', '.png'] # 이미지 확장자들
 
for (root, dirs, files) in os.walk(root_dir):
    if len(files) > 0:
        for file_name in files:
            if os.path.splitext(file_name)[1] in possible_img_extension:
                img_path = root + '/' + file_name
                
                # 경로에서 \를 모두 /로 바꿔줘야함
                img_path = img_path.replace('\\', '/') # \는 \\로 나타내야함         
                img_path_list.append(img_path)
                             
print(img_path_list)

detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor('./shape_predictor_68_face_landmarks.dat')

file_num = 0
for image in img_path_list:
  print(image)
  image = cv2.imread(image)
  
  
  image = imutils.resize(image, width=500)
  gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  # detect faces in the grayscale image
  rects = detector(gray, 1)

  for (i, rect) in enumerate(rects):
	# determine the facial landmarks for the face region, then
	# convert the facial landmark (x, y)-coordinates to a NumPy
	# array
	  shape = predictor(gray, rect)
	  shape = face_utils.shape_to_np(shape)
	# convert dlib's rectangle to a OpenCV-style bounding box
	# [i.e., (x, y, w, h)], then draw the face bounding box
	  (x, y, w, h) = face_utils.rect_to_bb(rect)
	  #cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
	  face = image[y:(y+h), x:(x+w)].copy()
  resized = imutils.resize(face, width=100)
  print_image_info(resized)

  #cv2_imshow(resized)
  #cv2.imshow("Output", image)
  #cv2.imshow("face", face)
  #cv2.waitKey(0)
  save_file = './dataset_output/fall_male/fall_male' + str(file_num) + '.jpg'
  cv2.imwrite(save_file, resized)
  file_num = file_num+1

